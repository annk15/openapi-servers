from fastapi import FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional
from dotenv import load_dotenv
import random

from comfy import (
    generate_images,
    get_active_workflow,
    get_workflow_configs,
    set_active_workflow,
)

app = FastAPI(
    title="ComfyUI API Wrapper",
    version="1.0.0",
    description="Wrapper API for interacting with the ComfyUI image generation server",
)

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup_event():
    load_dotenv()

# -------------------------------
# Pydantic models
# -------------------------------

# -------------------------------
# Routes
# -------------------------------

@app.get("/get_styles", summary="List available styles")
def get_styles():
    """
    Return the configured workflow styles.
    """
    return {"styles": get_workflow_configs()}


@app.post("/activate_style/{style_name}", summary="Activate one of the available styles")
def activate_style(style_name: str):
    """
    Activate the style to use when generating images.
    """
    try:
        set_active_workflow(style_name)
    except ValueError as exc:
        raise HTTPException(status_code=404, detail=str(exc))

    return {
        "active": get_active_workflow(),
        "workflows": get_workflow_configs(),
    }


@app.get("/generate_image", summary="Generate a image based on input parameters")
def generate_image(
    positive: str = Query(
        None, description="Requiered positive text prompt for the CLIPTextEncode node."
    ),
    negative: Optional[str] = Query(
        None, description="Optional negative text prompt for the CLIPTextEncode node."
    ),
    seed: Optional[int] = Query(
        None, ge=0, description="Optional seed to reproduce results."
    ),
):
    """
    Trigger ComfyUI to generate an image and return a Markdown image reference
    that points to a publicly accessible URL.
    """

    negative_default = "embedding:lazyneg"
    seed_default = random.randint(0, 2**32 - 1)

    print("- Generate image with:")
    print(f"Positive prompt: {positive}")
    print(f"No negative prompt provided, will use default: {negative_default}")
    print(f"No seed provided, will use default: {seed_default}")

    seed = seed if seed is not None else seed_default
    negative = negative if negative is not None else negative_default

    try:
        images_by_node = generate_images(
            positive_text=positive,
            negative_text=negative,
            seed=seed,
        )
    except Exception as exc:
        raise HTTPException(status_code=502, detail=f"Failed to generate image: {exc}")

    for node_images in images_by_node.values():
        if node_images:
            image_url = node_images[0]
            return (
                f"![positive_prompt: {positive}, negative_prompt: {negative}, seed: {seed}]"
                f"({image_url})"
            )

    raise HTTPException(status_code=500, detail="No images generated by ComfyUI")
