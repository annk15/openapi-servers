from fastapi import FastAPI, HTTPException, Query, Response, Request
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional
from dotenv import load_dotenv
from pathlib import Path

import os
import uuid
import imghdr
import random

from comfy import (
    generate_images,
    get_active_workflow,
    get_workflow_configs,
    set_active_workflow,
)

IMAGE_DIR = Path("./output")

app = FastAPI(
    title="ComfyUI API Wrapper",
    version="1.0.0",
    description="Wrapper API for interacting with the ComfyUI image generation server",
)

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup_event():
    load_dotenv()
    app.state.generated_images = {}

# -------------------------------
# Pydantic models
# -------------------------------

# -------------------------------
# Routes
# -------------------------------

@app.get("/workflows", summary="List available workflow configurations")
def list_workflows():
    """
    Return the configured workflows along with which one is currently active.
    """
    return {"workflows": get_workflow_configs()}


@app.post("/workflows/{workflow_name}/activate", summary="Set the active workflow")
def activate_workflow(workflow_name: str):
    """
    Update the active workflow used for subsequent generations.
    """
    try:
        set_active_workflow(workflow_name)
    except ValueError as exc:
        raise HTTPException(status_code=404, detail=str(exc))

    return {
        "active": get_active_workflow(),
        "workflows": get_workflow_configs(),
    }


@app.get("/generate_image", summary="Generate a image based on input parameters")
def generate_image(
    request: Request,
    positive: str = Query(
        None, description="Requiered positive text prompt for the CLIPTextEncode node."
    ),
    negative: Optional[str] = Query(
        None, description="Optional negative text prompt for the CLIPTextEncode node."
    ),
    seed: Optional[int] = Query(
        None, ge=0, description="Optional seed to reproduce results."
    ),
):
    """
    Trigger ComfyUI to generate an image and return a Markdown image reference
    that points to a publicly accessible URL.
    """

    negative_default = "embedding:lazyneg"
    seed_default = random.randint(0, 2**32 - 1)

    print("- Generate image with:")
    print(f"Positive prompt: {positive}")
    print( f"No negative prompt provided, will use default: {negative_default}" )
    print( f"No seed provided, will use default: {seed_default}" )

    seed = seed if seed is not None else seed_default
    negative = negative if negative is not None else negative_default

    try:
        images_by_node = generate_images(
            positive_text=positive,
            negative_text=negative,
            seed=seed,
        )
    except Exception as exc:
        raise HTTPException(status_code=502, detail=f"Failed to generate image: {exc}")

    for node_images in images_by_node.values():
        if node_images:
            image_bytes = node_images[0]
            image_id = str(uuid.uuid4())
            app.state.generated_images[image_id] = image_bytes
            image_url = request.url_for("hosted_image", image_id=image_id)
            return f"![image_id: {image_id}, positive_prompt: {positive}, negative_prompt: {negative}, seed: {seed}]({image_url})"

    raise HTTPException(status_code=500, detail="No images generated by ComfyUI")

@app.get("/hosted_image/{image_id}", summary="Don't call directly, only used to serve images")
def hosted_image(image_id: str):
    image_bytes = app.state.generated_images.get(image_id)
    if image_bytes is None:
        raise HTTPException(status_code=404, detail="Image not found")
    media_type = _guess_media_type(image_bytes)
    return Response(image_bytes, media_type=media_type)

def _guess_media_type(image_bytes: bytes) -> str:
    """Best-effort detection of image media type based on header bytes."""
    kind = imghdr.what(None, image_bytes)
    return {
        "png": "image/png",
        "jpeg": "image/jpeg",
        "jpg": "image/jpeg",
        "webp": "image/webp",
    }.get(kind, "application/octet-stream")
