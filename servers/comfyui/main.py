from fastapi import FastAPI, HTTPException, Query, Response, Request
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional
from dotenv import load_dotenv
from pathlib import Path

import os
import uuid
import imghdr

from comfy import generate_images

IMAGE_DIR = Path("./output")

app = FastAPI(
    title="ComfyUI API Wrapper",
    version="1.0.0",
    description="Wrapper to allow interaction with ComfyUI",
)

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup_event():
    load_dotenv()
    app.state.token = os.getenv("API_TOKEN")
    app.state.generated_images = {}
    print("Open Router token found!") 

# -------------------------------
# Pydantic models
# -------------------------------

# -------------------------------
# Routes
# -------------------------------


@app.get("/generate_image", summary="Generate a image")
def generate_image(
    request: Request,
    positive_prompt: Optional[str] = Query(
        None, description="Positive text prompt for the CLIPTextEncode node."
    ),
    seed: Optional[int] = Query(
        None, ge=0, description="Optional seed to reproduce results."
    ),
):
    """
    Trigger ComfyUI to generate an image and return a Markdown image reference
    that points to a publicly accessible URL.
    """
    try:
        images_by_node = generate_images(
            positive_text=positive_prompt,
            seed=seed,
        )
    except Exception as exc:
        raise HTTPException(status_code=502, detail=f"Failed to generate image: {exc}")

    for node_images in images_by_node.values():
        if node_images:
            image_bytes = node_images[0]
            image_id = str(uuid.uuid4())
            app.state.generated_images[image_id] = image_bytes
            image_url = request.url_for("get_generated_image", image_id=image_id)
            return f"![Alt text]({image_url})"

    raise HTTPException(status_code=500, detail="No images generated by ComfyUI")

@app.get("/generated_images/{image_id}", summary="Fetch a previously generated image")
def get_generated_image(image_id: str):
    image_bytes = app.state.generated_images.get(image_id)
    if image_bytes is None:
        raise HTTPException(status_code=404, detail="Image not found")
    media_type = _guess_media_type(image_bytes)
    return Response(image_bytes, media_type=media_type)

@app.get("/latest_image")
def latest_image():
    if not IMAGE_DIR.exists():
        return {"error": f"directory not found: {IMAGE_DIR}"}

    # Ta bara faktiska bildfiler
    files = [
        p for p in IMAGE_DIR.iterdir()
        if p.is_file() and p.suffix.lower() in {".png", ".jpg", ".jpeg", ".webp"}
    ]
    if not files:
        return {"error": "no image files"}

    # Sortera med hög precision (mtime i ns), senaste först
    files.sort(key=lambda p: (p.stat().st_mtime_ns, p.name), reverse=True)
    latest = files[0]
    media = {
        ".png": "image/png",
        ".jpg": "image/jpeg",
        ".jpeg": "image/jpeg",
        ".webp": "image/webp",
    }[latest.suffix.lower()]

    return Response(latest.read_bytes(), media_type=media)


def _guess_media_type(image_bytes: bytes) -> str:
    """Best-effort detection of image media type based on header bytes."""
    kind = imghdr.what(None, image_bytes)
    return {
        "png": "image/png",
        "jpeg": "image/jpeg",
        "jpg": "image/jpeg",
        "webp": "image/webp",
    }.get(kind, "application/octet-stream")
